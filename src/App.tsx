import { Button, Textarea } from "@mantine/core"
import { useState } from "react"

function App() {
    
    const [prompt, setPrompt] = useState<string>('');

    const [commitMessage, setCommitMessage] = useState<string>('');

    const [isLoading, setIsLoading] = useState<boolean>(false);

    const handleSubmit = async () => {
        console.log('Submit button clicked.');
        console.log(`Prompt: ${prompt}`);

        setIsLoading(true);

        try {
            const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${apiKey}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    "model": "deepseek/deepseek-chat:free",
                    "max_tokens": 100,
                    "messages": [
                        {
                            "role": "user",
                            "content": prompt
                        }
                    ]
                })
            });

            const data = await response.json();
            const modelResponse = data.choices[0].message.content;
            if (!modelResponse) {
                console.log("No response generated by the model.");
                setCommitMessage("No response generated by the model.");
            } else {
                console.log(`Generated commit message: ${modelResponse}`);
                setCommitMessage(modelResponse);
            }

            setIsLoading(false);
        } catch (error) {
            alert('Error in generating a git commit message.');
            console.log('Error in generating a git commit message: ', error);
        }

        setPrompt('');
    }

    return (
        <>
            <Textarea
                label="Provide a brief summary of your implementation"
                placeholder="Describe your implementation"
                autosize 
                minRows={2}
                value={prompt}
                onChange={(event) => setPrompt(event.target.value)}
            />

            <Button variant="default" onClick={handleSubmit}>Submit</Button>

            {
                isLoading ? 'Loading...' : commitMessage
            }
        </>
    )
}

export default App
